<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Classes on Headlamp</title>
    <link>https://kinvolk.github.io/headlamp/docs/latest/development/api/classes/</link>
    <description>Recent content in Classes on Headlamp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright the Headlamp project contributors</copyright><atom:link href="https://kinvolk.github.io/headlamp/docs/latest/development/api/classes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Class: default</title>
      <link>https://kinvolk.github.io/headlamp/docs/latest/development/api/classes/plugin_registry.default/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kinvolk.github.io/headlamp/docs/latest/development/api/classes/plugin_registry.default/</guid>
      <description>plugin/registry .default
Constructors constructor • new default()
Methods registerAppBarAction ▸ registerAppBarAction(actionName, actionFunc): void
Add a component into the app bar (at the top of the app).
example
register.registerAppBarAction(&amp;#39;monitor&amp;#39;, () =&amp;gt; &amp;lt;MonitorLink /&amp;gt; ); Parameters    Name Type Description     actionName string a unique name for it   actionFunc (&amp;hellip;args: any[]) =&amp;gt; null | Element a function that returns your component    Returns void</description>
    </item>
    
    <item>
      <title>Class: Headlamp</title>
      <link>https://kinvolk.github.io/headlamp/docs/latest/development/api/classes/plugin_lib.headlamp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kinvolk.github.io/headlamp/docs/latest/development/api/classes/plugin_lib.headlamp/</guid>
      <description>plugin/lib .Headlamp
This class is a more convenient way for plugins to call registerPlugin in order to register themselves.
Constructors constructor • new Headlamp()
Methods registerPlugin ▸ Static registerPlugin(pluginId, pluginObj): void
Got a new plugin to add? Well, registerPlugin is your friend.
example
const myPlugin = { initialize: (register) =&amp;gt; { // do some stuff with register  // use some libraries in window.pluginLib  return true; } } Headlamp.</description>
    </item>
    
    <item>
      <title>Class: Plugin</title>
      <link>https://kinvolk.github.io/headlamp/docs/latest/development/api/classes/plugin_lib.plugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kinvolk.github.io/headlamp/docs/latest/development/api/classes/plugin_lib.plugin/</guid>
      <description>plugin/lib .Plugin
Plugins should call Headlamp.registerPlugin(pluginId: string, pluginObj: Plugin) to register themselves.
They will have their initialize(register) method called at plugin initialization time.
Constructors constructor • new Plugin()
Methods initialize ▸ Abstract initialize(register): boolean
initialize is called for each plugin with a Registry which gives the plugin methods for doing things.
see Registry
Parameters    Name Type     register default     Returns boolean</description>
    </item>
    
  </channel>
</rss>
